{"version":3,"sources":["components/Artist.js","App.js","serviceWorker.js","index.js"],"names":["cardStyle","textAlign","imgStyle","width","height","liSongs","display","flexDirection","justifyContent","cardTitleStyle","Artist","_ref","data","onNext","onPrevious","onLike","onUnlike","listSong","songs","map","song","i","react_default","a","createElement","key","className","style","name","type","onClick","disabled","like","artist","src","image","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentIndex","_this2","fetch","then","response","json","result","Promise","all","artists","elem","concat","values","dataLabSongs","toptracks","track","filter","elemSong","rank","setState","_this$state","_this$state2","_this3","appStyle","margin","_this$state3","elm","components_Artist","handleNext","bind","handlePrevious","handleUnlike","handleLike","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6252025.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst cardStyle = {\r\n    textAlign: 'center',\r\n}\r\nconst imgStyle = {\r\n    width: '100%',\r\n    height: '300px'\r\n}\r\nconst liSongs = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between'\r\n}\r\nconst cardTitleStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between'\r\n}\r\nconst Artist = ({ data, onNext, onPrevious, onLike, onUnlike }) => {\r\n    const listSong = data.songs.map((song, i) =>\r\n        <li key={i} className=\"list-group-item\" style={liSongs}>\r\n            <h6>{song.name}</h6>\r\n            <div>\r\n                <button \r\n                type=\"button\"\r\n                className=\"btn btn-light btn-sm\"\r\n                onClick={() => {\r\n                    onLike()\r\n                }}>\r\n                <i className=\"far fa-heart\"></i></button>\r\n                <button \r\n                type=\"button\" \r\n                className=\"btn btn-light btn-sm\"\r\n                onClick={() => {\r\n                    onUnlike()\r\n                }}>\r\n                <i className=\"far fa-thumbs-down\"></i></button>\r\n                <button type=\"button\" className=\"btn btn-light btn-sm\" disabled>{song.like}</button>\r\n            </div>\r\n        </li>\r\n    )\r\n    return (\r\n        <div key={data.artist} className=\"card\" style={cardStyle}>\r\n            <div>\r\n                <img className=\"card-img-top\" src={data.image} style={imgStyle} alt='300px' />\r\n            </div>\r\n            <div className=\"card-body\" style={cardTitleStyle}>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-light btn-sm\"\r\n                    onClick={() => {\r\n                        onPrevious()\r\n                    }}>\r\n                    <i className=\"fas fa-angle-double-left\"></i></button>\r\n                <h5 className=\"card-title\">{data.artist}</h5>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-light btn-sm\"\r\n                    onClick={() => {\r\n                        onNext()\r\n                    }}>\r\n                    <i className=\"fas fa-angle-double-right\"></i></button>\r\n            </div>\r\n            <ul className=\"list-group list-group-flush\">\r\n                {listSong}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Artist","import React, { Component } from 'react';\nimport './App.css';\n// import Example from './components/Example';\nimport Artist from './components/Artist';\n// import Songs from './components/Songs';\n\n// import { Button } from 'reactstrap';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      data: [],\n      currentIndex: 22\n    }\n  }\n\n  componentWillMount() {\n    const apiArtist = 'https://ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=5c8e2c09c2a2396e6d24a126d15464fc&format=json';\n    fetch(apiArtist)\n      .then(response => response.json())\n      .then(result => {\n        Promise.all(result.artists.artist.map(elem => {\n          return fetch(`https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=${elem.name}&api_key=5c8e2c09c2a2396e6d24a126d15464fc&format=json`)\n            .then(response => response.json())\n        })\n        ).then(values => {\n          const dataLabSongs = values.map((elem, i) => {\n            return {\n              artist: result.artists.artist[i].name,\n              image: result.artists.artist[i].image[4]['#text'],\n              songs: elem.toptracks.track\n                .filter(elemSong => elemSong['@attr'].rank <= 10)\n                .map(elemSong => { return {name: elemSong.name, like : 0} }),\n            }\n          })\n          this.setState({\n            data: dataLabSongs\n          })\n          \n        }\n        )\n      })\n  }\n\n  handleNext(){\n    this.setState({\n      currentIndex : this.state.currentIndex + 1\n    })\n  }\n  handlePrevious(){\n    this.setState({\n      currentIndex : this.state.currentIndex - 1\n    })\n  }\n  handleUnlike(){\n    const {data, currentIndex} = this.state\n    data[currentIndex].songs.like  -= 1\n    this.setState({\n      data\n    })\n  }\n  handleLike(){\n    const {data, currentIndex} = this.state\n    data[currentIndex].songs.like  += 1\n    this.setState({\n      data\n    })\n  }\n  render() {\n    const appStyle = {\n      margin:'auto',\n      width: '50%',\n      \n    }\n    const {data, currentIndex} = this.state\n    const a = data.map((elm,i)=> \n    <div key = {i} style={appStyle}>\n    <Artist \n    data={elm} \n    onNext={this.handleNext.bind(this)} \n    onPrevious={this.handlePrevious.bind(this)}\n    onUnlike={this.handleUnlike.bind(this)} \n    onLike={this.handleLike.bind(this)} \n    />  \n    <div>\n    </div>\n    </div>\n    )[currentIndex]\n\n    return (\n      <div >\n        {a}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}